openapi: 3.0.3
info:
  title: SOA Lab1 Variant 43435
  version: '1.0.0'
  description: |
    Разработать спецификацию в формате OpenAPI для набора веб-сервисов, реализующего следующую функциональность:

    **Первый веб-сервис** должен осуществлять управление коллекцией объектов. В коллекции необходимо хранить объекты класса Person. Описание которого приведено ниже:
    ``` 
    public class Person {
      private Integer id; //Поле не может быть null, Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
      private String name; //Поле не может быть null, Строка не может быть пустой
      private Coordinates coordinates; //Поле не может быть null
      private java.time.ZonedDateTime creationDate; //Поле не может быть null, Значение этого поля должно генерироваться автоматически
      private Double height; //Поле может быть null, Значение поля должно быть больше 0
      private String passportID; //Строка не может быть пустой, Длина строки должна быть не меньше 10, Длина строки не должна быть больше 34, Поле не может быть null
      private Color eyeColor; //Поле может быть null
      private Country nationality; //Поле может быть null
      private Location location; //Поле не может быть null
    }
    public class Coordinates {
      private Long x; //Максимальное значение поля: 273, Поле не может быть null
      private Long y; //Максимальное значение поля: 343, Поле не может быть null
    }
    public class Location {
      private Long x; //Поле не может быть null
      private Integer y; //Поле не может быть null
      private Integer z; //Поле не может быть null
    }
    public enum Color {
      BLACK,
      BLUE,
      YELLOW,
      BROWN;
    }
    public enum Country {
      INDIA,
      VATICAN,
      THAILAND,
      NORTH_KOREA,
      JAPAN;
    }
    ```
    Веб-сервис должен удовлетворять следующим требованиям:
      - API, реализуемый сервисом, должен соответствовать рекомендациям подхода RESTful.
      - Необходимо реализовать следующий базовый набор операций с объектами коллекции: добавление нового элемента, получение элемента по ИД, обновление элемента, удаление элемента, получение массива элементов.
      - Операция, выполняемая над объектом коллекции, должна определяться методом HTTP-запроса.
      - Операция получения массива элементов должна поддерживать возможность сортировки и фильтрации по любой комбинации полей класса, а также возможность постраничного вывода результатов выборки с указанием размера и порядкового номера выводимой страницы.
      - Все параметры, необходимые для выполнения операции, должны передаваться в URL запроса.
      - Информация об объектах коллекции должна передаваться в формате **xml**.
      - В случае передачи сервису данных, нарушающих заданные на уровне класса ограничения целостности, сервис должен возвращать код ответа http, соответствующий произошедшей ошибке.

    Помимо базового набора, веб-сервис должен поддерживать следующие операции над объектами коллекции:
      - Вернуть один (любой) объект, значение поля passportID которого является максимальным.
      - Сгруппировать объекты по значению поля id, вернуть количество элементов в каждой группе.
      - Вернуть количество объектов, значение поля height которых меньше заданного.

    Эти операции должны размещаться на отдельных URL.

    **Второй веб-сервис** должен располагаться на URL `/demography`, и реализовывать ряд дополнительных операций, связанных с вызовом API первого сервиса:

      - `/eye-color/{eye-color}/percentage` : вывести долю людей с заданным цветом глаз в общей популяции (в процентах)
      - `/nationality/{nationality}/eye-color/{eye-color}/percentage` : вывести долю людей с заданным цветом глаз в пределах указанной национальности (в процентах)

    Эти операции также должны размещаться на отдельных URL.

    Для разработанной спецификации необходимо сгенерировать интерактивную веб-документацию с помощью Swagger UI. Документация должна содержать описание всех REST API обоих сервисов с текстовым описанием функциональности каждой операции. Созданную веб-документацию необходимо развернуть на сервере `helios`.
  license:
    name: ИТМО/ВТ
    url: https://se.ifmo.ru

servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: persons
    description: Operations about person
  - name: demography
    description: Demography operations
paths:
  /persons:
    get:
      tags:
        - persons
      summary: Get persons from the store
      description: Get persons from the store
      operationId: getPersons
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Number of page to get
        - in: query
          name: count
          schema:
            type: integer
          required: false
          description: Number of results per page
        - in: query
          name: personId
          schema:
            type: integer
            format: int32
            minimum: 1
          required: false
          description: Numeric ID of the person to get, >= 1
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Name of the person to get
        - in: query
          name: coordinatesX
          schema:
            type: integer
            format: int64
            maximum: 273
          required: false
          description: Coordinates X of the person to get
        - in: query
          name: coordinatesY
          schema:
            type: integer
            format: int64
            maximum: 343
          required: false
          description: Coordinates Y of the person to get
        - in: query
          name: creationDate
          schema:
            type: string
            description: java.time.ZonedDateTime
          required: false
          description: Creation date of the person to get
        - in: query
          name: height
          schema:
            type: number
            format: double
            minimum: 0
            exclusiveMinimum: true
          required: false
          description: Height of the person to get
        - in: query
          name: passportID
          schema:
            type: string
            minLength: 10
            maxLength: 34
          required: false
          description: passportID of the person to get
        - in: query
          name: color
          schema:
            $ref: '#/components/schemas/Color'
          required: false
          description: Eye color of the person to get
        - in: query
          name: color1
          schema:
            $ref: '#/components/schemas/Color'
          required: false
          description: Eye color of the person to get
        - in: query
          name: country
          schema:
            $ref: '#/components/schemas/Country'
          required: false
          description: Country of the person to get
        - in: query
          name: locationX
          schema:
            type: integer
            format: int64
          required: false
          description: Location X of the person to get
        - in: query
          name: locationY
          schema:
            type: integer
            format: int32
          required: false
          description: Location Y of the person to get
        - in: query
          name: locationZ
          schema:
            type: integer
            format: int32
          required: false
          description: Location Z of the person to get
      responses:
        '200':
          description: Successful operation
          content:          
            application/xml:
              schema:
                type: object
                xml:
                  name: persons
                properties:
                  page:
                    type: number
                  count:
                    type: number
                  results:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Person'
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: number
                  count:
                    type: number
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'   
        '405':
          description: Validation exception
      security:
        - backend_auth: []
    post:
      tags:
        - persons
      summary: Add a new Person to the store
      description: Add a new Person to the store
      operationId: addPerson
      requestBody:
        $ref: '#/components/requestBodies/Person'
      responses:
        '200':
          description: Successful operation
          content:          
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '405':
          description: Validation exception
      security:
        - backend_auth: []
  /persons/{personId}:
    get:
      tags:
        - persons
      summary: Get an existing Person
      description: Get an existing Person by Id
      operationId: getPerson
      parameters:
        - in: path
          name: personId
          schema:
            type: integer
          required: true
          description: Numeric ID of the person to update
      responses:
        '200':
          description: Successful operation
          content:          
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
      security:
        - backend_auth: []
    patch:
      tags:
        - persons
      summary: Update an existing Person
      description: Update an existing Person by Id
      operationId: updatePerson
      parameters:
        - in: path
          name: personId
          schema:
            type: integer
          required: true
          description: Numeric ID of the person to update
      requestBody:
        description: Update an existent Person in the store
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: Successful operation
          content:          
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
        '405':
          description: Validation exception
      security:
        - backend_auth: []
    delete:
      tags:
        - persons
      summary: Delete an existing Person
      description: Delete an existing Person by Id
      operationId: deletePerson
      parameters:
        - in: path
          name: personId
          schema:
            type: integer
          required: true
          description: Numeric ID of the person to delete
      responses:
        '200':
          description: Successful operation
          content:          
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
      security:
        - backend_auth: []
  /demography/eye-color/{eye-color}/percentage:
    get:
      tags:
        - demography
      summary: Get percentage of Persons with specified eye color
      description: Get percentage of Persons with specified eye color
      operationId: getPercentageOfPersonsByEyeColor
      parameters:
        - in: path
          name: eye-color
          schema:
            $ref: '#/components/schemas/Color'
          required: true
          description: Eye color of the persons
      responses:
        '200':
          description: Successful operation
          content:          
            application/xml:
              schema:
                type: number
                xml:
                  name: percentage
            application/json:
              schema:
                type: object
                properties:
                  percentage:
                    type: number
  /demography/nationality/{nationality}/eye-color/{eye-color}/percentage:
    get:
      tags:
        - demography
      summary: Get percentage of Persons with specified nationality and eye color
      description: Get percentage of Persons with specified nationality and eye color
      operationId: getPercentageOfPersonsByNationalityAndEyeColor
      parameters:
        - in: path
          name: nationality
          schema:
            $ref: '#/components/schemas/Country'
          required: true
          description: Country of the persons
        - in: path
          name: eye-color
          schema:
            $ref: '#/components/schemas/Color'
          required: true
          description: Eye color of the persons
      responses:
        '200':
          description: Successful operation
          content:          
            application/xml:
              schema:
                type: number
                xml:
                  name: percentage
            application/json:
              schema:
                type: object
                properties:
                  percentage:
                    type: number
components:
  schemas:
    Country:
      type: string
      enum:
        - INDIA
        - VATICAN
        - THAILAND
        - NORTH_KOREA
        - JAPAN
    Color:
      type: string
      enum:
        - BLACK
        - BLUE
        - YELLOW
        - BROWN
    Location:
      type: object
      properties:
        x:
          type: integer
          format: int64
        y:
          type: integer
          format: int32
        z:
          type: integer
          format: int32
      xml:
        name: location
    Coordinates:
      type: object
      properties:
        x:
          type: integer
          format: int64
          maximum: 273
        y:
          type: integer
          format: int64
          maximum: 343
      xml:
        name: coordinates
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          description: Unique, auto-generated value
        name:
          type: string
          minLength: 1
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          description: java.time.ZonedDateTime, auto-generated value
        height:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        passportID:
          type: string
          minLength: 10
          maxLength: 34
        eyeColor:
          $ref: '#/components/schemas/Color'
        nationality:
          $ref: '#/components/schemas/Country'
        location:
          $ref: '#/components/schemas/Location'
      xml:
        name: person
  requestBodies:
    Person:
      description: Person object
      content:
        application/xml:
          schema:
            type: object
            xml:
              name: person
            properties:
              name:
                type: string
                minLength: 1
              coordinates:
                $ref: '#/components/schemas/Coordinates'
              height:
                type: number
                format: double
                minimum: 0
                exclusiveMinimum: true
              passportID:
                type: string
                minLength: 10
                maxLength: 34
              eyeColor:
                $ref: '#/components/schemas/Color'
              nationality:
                $ref: '#/components/schemas/Country'
              location:
                $ref: '#/components/schemas/Location'
  responses:
    UnauthorizedError:
      description: Authentication information is missing
  securitySchemes:
    backend_auth:
      type: http
      scheme: basic